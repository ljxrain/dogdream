generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  name             String?
  password         String
  phone            String?
  address          String?
  city             String?
  province         String?
  avatarUrl        String?
  role             String            @default("USER")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  creations        Creation[]
  likes            Like[]
  orders           Order[]
  shares           Share[]
  emojiGenerations EmojiGeneration[]

  @@map("users")
}

model Creation {
  id             String   @id @default(cuid())
  title          String?
  description    String?
  sourceImageUrl String
  resultImageUrl String
  style          String
  quality        String
  fastMode       Boolean  @default(false)
  status         String   @default("PROCESSING")
  processingTime Int?
  isPublic       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  likes          Like[]
  orders         Order[]
  shares         Share[]

  @@map("creations")
}

model Like {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  userId     String
  creationId String
  creation   Creation @relation(fields: [creationId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, creationId])
  @@map("likes")
}

model Share {
  id         String   @id @default(cuid())
  platform   String
  createdAt  DateTime @default(now())
  userId     String
  creationId String
  creation   Creation @relation(fields: [creationId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("shares")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  category    String
  basePrice   Float
  imageUrl    String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@map("products")
}

model Order {
  id               String      @id @default(cuid())
  orderNumber      String      @unique
  status           String      @default("PENDING") // PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  totalAmount      Float
  shippingFee      Float       @default(10)
  recipientName    String
  recipientPhone   String
  shippingAddress  String
  shippingCity     String
  shippingProvince String
  zipCode          String?
  
  // 宠物Pod定制相关字段
  petImageUrl      String?     // 宠物照片URL
  productName      String?     // 产品名称
  customPreviewUrl String?     // 定制预览图URL
  customNotes      String?     // 定制备注
  
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  paidAt           DateTime?
  shippedAt        DateTime?
  deliveredAt      DateTime?
  cancelledAt      DateTime?
  
  userId           String
  creationId       String?
  logistics        Logistics[]
  orderItems       OrderItem[]
  creation         Creation?   @relation(fields: [creationId], references: [id])
  user             User        @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  unitPrice Float
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Logistics {
  id             String   @id @default(cuid())
  trackingNumber String?
  carrier        String?
  status         String
  location       String?
  description    String?
  createdAt      DateTime @default(now())
  orderId        String
  order          Order    @relation(fields: [orderId], references: [id])

  @@map("logistics")
}

model Statistics {
  id        String   @id @default(cuid())
  type      String
  key       String
  value     String
  date      DateTime
  createdAt DateTime @default(now())

  @@unique([type, key, date])
  @@map("statistics")
}

model RegionStats {
  id           String   @id @default(cuid())
  province     String
  city         String
  orderCount   Int      @default(0)
  userCount    Int      @default(0)
  totalRevenue Float    @default(0)
  month        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([province, city, month])
  @@map("region_stats")
}

model EmojiGeneration {
  id             String   @id @default(cuid())
  userId         String
  emojiType      String   // 表情包类型：情感表达、问候交流等
  style          String   // 制作风格：卡通风格、真实风格等
  originalImage  String   // 原始图片的base64或URL
  generatedEmoji String   // 生成的表情包URL
  analysis       String   // 豆包对原图的分析结果
  prompt         String   // 生成表情包的完整提示词
  isPublic       Boolean  @default(true)  // 是否公开展示
  isSaved        Boolean  @default(false) // 是否保存到用户作品库
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user           User     @relation(fields: [userId], references: [id])

  @@map("emoji_generations")
}
